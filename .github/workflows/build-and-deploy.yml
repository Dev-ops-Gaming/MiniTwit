name: Deploy services to DigitalOcean
    
on:
  push:
    branches:
      - main
      - master
      - fix-deployment
      - staging
  workflow_dispatch: 
    
jobs:
  #Calling reusable workflows
  call-hadolint:
    uses: Dev-ops-Gaming/MiniTwit/.github/workflows/docker-linter.yml@staging
  
  call-golangci:
    uses: Dev-ops-Gaming/MiniTwit/.github/workflows/golangci-lint.yml@staging

  run-tests:
    runs-on: ubuntu-latest
    needs: [call-hadolint, call-golangci]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Find Docker directory and test script
        id: find_paths
        run: |
          # Find docker directory that contains Dockerfile.test
          DOCKER_DIR=$(find . -name "Dockerfile.test" -type f | xargs dirname | head -n 1)
          if [ -z "$DOCKER_DIR" ]; then
            echo "Error: Dockerfile.test not found in the repository"
            exit 1
          fi
          echo "DOCKER_DIR=${DOCKER_DIR}" >> $GITHUB_OUTPUT
          echo "Found Docker directory at: ${DOCKER_DIR}"
          
          # Find run_tests.sh script
          SCRIPT_PATH=$(find . -name "run_tests.sh" -type f | head -n 1)
          if [ -z "$SCRIPT_PATH" ]; then
            echo "Error: run_tests.sh script not found in the repository"
            exit 1
          fi
          echo "SCRIPT_PATH=${SCRIPT_PATH}" >> $GITHUB_OUTPUT
          echo "Found test script at: ${SCRIPT_PATH}"

      - name: Run Test Suite
        run: |
          # Copy the script to the Docker directory to ensure relative paths work
          cp "${{ steps.find_paths.outputs.SCRIPT_PATH }}" "${{ steps.find_paths.outputs.DOCKER_DIR }}/run_tests.sh"
          
          # Change to the Docker directory
          cd "${{ steps.find_paths.outputs.DOCKER_DIR }}"
          echo "Running tests from directory: $(pwd)"
          
          # List contents of the directory for debugging
          ls -la
          
          # Make the script executable and run it
          sudo chmod +x ./run_tests.sh
          sudo ./run_tests.sh
        
  build-and-deploy:
    runs-on: ubuntu-latest
    # this job should run only if tests pass 
    needs: [run-tests]
    environment: minitwit
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Verify secrets
        run: |
          echo "Checking if secrets are available:"
          echo "DOCKER_USERNAME is set: ${{ secrets.DOCKER_USERNAME != '' }}"
          echo "DOCKER_PASSWORD is set: ${{ secrets.DOCKER_PASSWORD != '' }}"
          echo "SSH_USER is set: ${{ secrets.SSH_USER != '' }}"
          echo "SSH_HOST is set: ${{ secrets.SSH_HOST != '' }}"
          echo "ACTIONS_SSH_PRIVATE is set: ${{ secrets.ACTIONS_SSH_PRIVATE != '' }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push minitwit-app
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: pbjh/minitwit-app:latest
          cache-from: type=registry,ref=pbjh/minitwit-app:webbuildcache
          cache-to: type=registry,ref=pbjh/minitwit-app:webbuildcache,mode=max

      - name: Build and push minitwit-api
        uses: docker/build-push-action@v6
        with:
            context: .
            file: docker/Dockerfile.api
            push: true
            tags: pbjh/minitwit-api:latest
            cache-from: type=registry,ref=pbjh/minitwit-api:webbuildcache
            cache-to: type=registry,ref=pbjh/minitwit-api:webbuildcache,mode=max

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          printf "%s\n" "${{ secrets.ACTIONS_SSH_PRIVATE }}" > ~/.ssh/do_ssh_key
          chmod 600 ~/.ssh/do_ssh_key
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        env:
          SSH_KEY: ${{ secrets.ACTIONS_SSH_PRIVATE }}

      - name: Sync files with rsync
        run: |
         rsync -avz --delete \
            -e "ssh -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no" \
            ./remote_files/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/minitwit/

      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST '/minitwit/deploy.sh'
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}