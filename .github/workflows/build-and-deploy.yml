name: Deploy services to DigitalOcean
    
on:
  push:
    branches:
      - main
      - master
      - fix-deployment
      - staging
  workflow_dispatch: 
    
jobs:
  #Calling reusable workflows
  call-hadolint:
    uses: Dev-ops-Gaming/MiniTwit/.github/workflows/docker-linter.yml@staging
  
  call-golangci:
    uses: Dev-ops-Gaming/MiniTwit/.github/workflows/golangci-lint.yml@staging

  run-tests:
    runs-on: ubuntu-latest
    needs: [call-hadolint, call-golangci]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Run manual test steps directly
        run: |
          # Display repository structure to see what we're working with
          echo "Repository structure:"
          find . -name "Dockerfile*"
          find . -name "docker-compose*"
          
          # Setup test database
          echo "Setting up test database"
          docker-compose -f docker/docker-compose.test.yml up -d postgres
          sleep 15 # Wait for database to be ready
          
          # Build and run the application
          echo "Building application"
          docker build -t minitwit-app -f docker/Dockerfile .
          docker-compose -f docker/docker-compose.test.yml up -d minitwit
          sleep 15 # Wait for application to start
          
          # Build and run the tests
          echo "Building and running tests"
          if [ -f "docker/Dockerfile.test" ]; then
            echo "Found Dockerfile.test in docker/"
            docker build -t minitwit-uitests -f docker/Dockerfile.test .
          elif [ -f "Dockerfile.test" ]; then
            echo "Found Dockerfile.test in root"
            docker build -t minitwit-uitests -f Dockerfile.test .
          else
            # Search for the file
            TEST_DOCKERFILE=$(find . -name "Dockerfile.test" | head -n 1)
            if [ -n "$TEST_DOCKERFILE" ]; then
              echo "Found Dockerfile.test at $TEST_DOCKERFILE"
              docker build -t minitwit-uitests -f "$TEST_DOCKERFILE" .
            else
              echo "ERROR: Cannot find Dockerfile.test anywhere in the repository"
              exit 1
            fi
          fi
          
          # Run the tests with abort on container exit
          docker-compose -f docker/docker-compose.test.yml up --abort-on-container-exit uitests
          
          # Check the test result
          TEST_EXIT_CODE=$(docker inspect -f '{{.State.ExitCode}}' minitwit-uitests || echo "1")
          
          # Cleanup
          docker-compose -f docker/docker-compose.test.yml down -v
          
          # Exit with test result
          echo "Tests completed with exit code: $TEST_EXIT_CODE"
          exit $TEST_EXIT_CODE
        
  build-and-deploy:
    runs-on: ubuntu-latest
    # this job should run only if tests pass 
    needs: [run-tests]
    environment: minitwit
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Verify secrets
        run: |
          echo "Checking if secrets are available:"
          echo "DOCKER_USERNAME is set: ${{ secrets.DOCKER_USERNAME != '' }}"
          echo "DOCKER_PASSWORD is set: ${{ secrets.DOCKER_PASSWORD != '' }}"
          echo "SSH_USER is set: ${{ secrets.SSH_USER != '' }}"
          echo "SSH_HOST is set: ${{ secrets.SSH_HOST != '' }}"
          echo "ACTIONS_SSH_PRIVATE is set: ${{ secrets.ACTIONS_SSH_PRIVATE != '' }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push minitwit-app
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: pbjh/minitwit-app:latest
          cache-from: type=registry,ref=pbjh/minitwit-app:webbuildcache
          cache-to: type=registry,ref=pbjh/minitwit-app:webbuildcache,mode=max

      - name: Build and push minitwit-api
        uses: docker/build-push-action@v6
        with:
            context: .
            file: docker/Dockerfile.api
            push: true
            tags: pbjh/minitwit-api:latest
            cache-from: type=registry,ref=pbjh/minitwit-api:webbuildcache
            cache-to: type=registry,ref=pbjh/minitwit-api:webbuildcache,mode=max

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          printf "%s\n" "${{ secrets.ACTIONS_SSH_PRIVATE }}" > ~/.ssh/do_ssh_key
          chmod 600 ~/.ssh/do_ssh_key
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        env:
          SSH_KEY: ${{ secrets.ACTIONS_SSH_PRIVATE }}

      - name: Sync files with rsync
        run: |
         rsync -avz --delete \
            -e "ssh -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no" \
            ./remote_files/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/minitwit/

      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST '/minitwit/deploy.sh'
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}