name: Deploy services to DigitalOcean
    
on:
  push:
    branches:
      - main
      - master
      - fix-deployment
  workflow_dispatch: 
    
jobs:
  #Calling reusable workflows
  call-hadolint:
    uses: Dev-ops-Gaming/MiniTwit/.github/workflows/docker-linter.yml@staging
  
  call-golangci:
    uses: Dev-ops-Gaming/MiniTwit/.github/workflows/golangci-lint.yml@staging

  run-tests:
    runs-on: ubuntu-latest
    needs: [call-hadolint, call-golangci]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Display repository structure
        run: |
          echo "Project structure:"
          ls -la
          echo "Content of docker directory:"
          ls -la docker/

      - name: Check Test Files
        run: |
          echo "Looking for Dockerfile.test..."
          find . -name "Dockerfile.test"
          
          echo "Looking for docker-compose.test.yml..."
          find . -name "docker-compose.test.yml"
          
          echo "Checking run_tests.sh content..."
          cat run_tests.sh | head -n 50

      - name: Modify run_tests.sh if necessary
        run: |
          # Update the script to use correct paths if needed
          if grep -q "Dockerfile.test" run_tests.sh; then
            if [ ! -f "Dockerfile.test" ] && [ -f "docker/Dockerfile.test" ]; then
              echo "Updating Dockerfile.test path in script..."
              sed -i 's|Dockerfile.test|docker/Dockerfile.test|g' run_tests.sh
            fi
          fi
          
          if grep -q "docker-compose.test.yml" run_tests.sh; then
            if [ ! -f "docker-compose.test.yml" ] && [ -f "docker/docker-compose.test.yml" ]; then
              echo "Updating docker-compose.test.yml path in script..."
              sed -i 's|docker-compose.test.yml|docker/docker-compose.test.yml|g' run_tests.sh
            fi
          fi

      - name: Run Tests
        run: |
          chmod +x run_tests.sh
          sudo -E ./run_tests.sh
        
  build-and-deploy:
    runs-on: ubuntu-latest
    # this job should run only if tests pass 
    needs: [run-tests]
    environment: minitwit
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Verify secrets
        run: |
          echo "Checking if secrets are available:"
          echo "DOCKER_USERNAME is set: ${{ secrets.DOCKER_USERNAME != '' }}"
          echo "DOCKER_PASSWORD is set: ${{ secrets.DOCKER_PASSWORD != '' }}"
          echo "SSH_USER is set: ${{ secrets.SSH_USER != '' }}"
          echo "SSH_HOST is set: ${{ secrets.SSH_HOST != '' }}"
          echo "ACTIONS_SSH_PRIVATE is set: ${{ secrets.ACTIONS_SSH_PRIVATE != '' }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push minitwit-app
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: pbjh/minitwit-app:latest
          cache-from: type=registry,ref=pbjh/minitwit-app:webbuildcache
          cache-to: type=registry,ref=pbjh/minitwit-app:webbuildcache,mode=max

      - name: Build and push minitwit-api
        uses: docker/build-push-action@v6
        with:
            context: .
            file: docker/Dockerfile.api
            push: true
            tags: pbjh/minitwit-api:latest
            cache-from: type=registry,ref=pbjh/minitwit-api:webbuildcache
            cache-to: type=registry,ref=pbjh/minitwit-api:webbuildcache,mode=max

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          printf "%s\n" "${{ secrets.ACTIONS_SSH_PRIVATE }}" > ~/.ssh/do_ssh_key
          chmod 600 ~/.ssh/do_ssh_key
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        env:
          SSH_KEY: ${{ secrets.ACTIONS_SSH_PRIVATE }}

      - name: Sync files with rsync
        run: |
         rsync -avz --delete \
            -e "ssh -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no" \
            ./remote_files/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/minitwit/

      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST '/minitwit/deploy.sh'
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}