name: Release MiniTwit

on:
  push:
    branches:
      - main
    paths:
      - VERSION.md
  schedule:
    - cron: '30 23 * * 4' # Every Thursday at 23:30 UTC
  workflow_dispatch:

jobs:
  automatic-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch latest version tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || echo "v0.0.0")
          echo "Latest tag found: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      - name: Read version from VERSION.md
        id: read_version_file
        run: |
          if [ -f VERSION.md ]; then
            FILE_VERSION=$(cat VERSION.md | tr -d '[:space:]')
            echo "Version from VERSION.md: $FILE_VERSION"
            echo "file_version=$FILE_VERSION" >> $GITHUB_ENV
          else
            echo "VERSION.md not found. Exiting."
            exit 1
          fi

      - name: Determine next version
        id: versioning
        run: |
          LATEST_TAG=${{ env.latest_tag }}
          FILE_VERSION=${{ env.file_version }}

          # Compare versions
          if [ "$(printf '%s\n' "$FILE_VERSION" "$LATEST_TAG" | sort -V | tail -n 1)" = "$FILE_VERSION" ]; then
            NEW_VERSION="$FILE_VERSION"
          else
            if [ "$LATEST_TAG" = "v0.0.0" ]; then
              NEW_VERSION="v1.0.0"
            else
              IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG//v/}"
              PATCH=$((PATCH + 1))
              NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
            fi
          fi

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Validate against SemVar pattern
        id: validate_version
        run: |
          VERSION=${{ steps.versioning.outputs.version }}
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          LATEST_TAG=${{ env.latest_tag }}
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            echo "First release, including all commits."
            COMMITS=$(git log --pretty=format:"* %s (%h)")
          else
            echo "Changelog since last release ($LATEST_TAG)"
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"* %s (%h)")
          fi
          
          {
            echo "## MiniTwit Release ${{ steps.versioning.outputs.version }}"
            echo "### Released on $(date +'%d-%m-%Y')"
            echo ""
            echo "### Changes"
            echo "$COMMITS"
          } > release_notes.md

          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.versioning.outputs.version }}
          tag_name: ${{ steps.versioning.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}