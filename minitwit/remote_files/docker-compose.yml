services:
  app:
    container_name: minitwit-app
    build:
          context: ../../
          dockerfile: docker/Dockerfile
    image: pbjh/minitwit-app:latest
    ports:
      - "8080:8080"
    environment:
      - DB_USER
      - DB_PASSWORD
      - DB_HOST
      - DB_PORT
      - DB_DBNAME
      - DB_SSLMODE
      - DB_TIMEZONE
  api:
    container_name: minitwit-api
    build:
      context: ../../
      dockerfile: docker/Dockerfile.api
    image: pbjh/minitwit-api:latest
    ports:
      - "8081:8081"
    environment:
      - DB_USER
      - DB_PASSWORD
      - DB_HOST
      - DB_PORT
      - DB_DBNAME
      - DB_SSLMODE
      - DB_TIMEZONE

  prometheus:
    container_name: minitwit-prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    environment:
      - LOG_LEVEL=warn

  grafana:
    container_name: minitwit-grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_LOG_LEVEL=warn
    depends_on:
      - prometheus
    volumes:
      - grafana-storage:/var/lib/grafana

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file. It also creates the
  # roles required by some of these users.
  #
  # This task only needs to be performed once, during the *initial* startup of
  # the stack. Any subsequent run will reset the passwords of existing users to
  # the values defined inside the '.env' file, and the built-in roles to their
  # default permissions.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up setup'.

  #It expects the .env file in the same folder as it
  # so to run setup (ONLY NEEDS TO BE DONE ONCE), run this command to pass the .env:
  # docker compose --env-file ../../.env up setup
  # And
  # docker compose --env-file ../../.env down setup

  # Then, to build application:
  # docker compose --env-file ../../.env up build
  # docker compose --env-file ../../.env up -d
  # Elastic available on http://localhost:5601
  setup:
    profiles:
      - setup
    build:
      context: ../../setup/ #should go to setup folder
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ../../setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ../../setup/lib.sh:/lib.sh:ro,Z
      - ../../setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: ../../elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ../../elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200 # Main Elasticsearch input
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk
    restart: unless-stopped

  logstash:
    build:
      context: ../../logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ../../logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ../../logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044 # Beats input
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped

  filebeat:
    extends:
      file: ../../filebeat/filebeat-compose.yml
      service: filebeat

  kibana:
    build:
      context: ../../kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ../../kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601 # Kibana UI Dashboard
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped

networks:
  elk:
    driver: bridge
  main:

volumes:
  grafana-storage:
  elasticsearch: